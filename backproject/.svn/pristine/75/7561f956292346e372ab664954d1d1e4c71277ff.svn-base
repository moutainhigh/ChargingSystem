package com.egintra.feeService.business.service.impl;

import com.egintra.common.dto.AccountReqDTO;
import com.egintra.common.dto.InvoiceReqDTO;
import com.egintra.common.dto.RightUserDTO;
import com.egintra.common.dto.VehiclePayReqDTO;
import com.egintra.common.dto.business.BusinessPaymentReqDTO;
import com.egintra.common.dto.business.DUnlockReqDTO;
import com.egintra.common.dto.business.ResultReqDTO;
import com.egintra.common.dto.business.SysDateReqDTO;
import com.egintra.common.dto.business.UploadinfoReqDTO;
import com.egintra.common.dto.business.VUnlockReqDTO;
import com.egintra.common.dto.finance.FeeDrvjkMeterialRespDTO;
import com.egintra.common.dto.finance.FeeDrvjkReqDTO;
import com.egintra.common.dto.pay.DriversDTO;
import com.egintra.common.dto.pay.VechicleDTO;
import com.egintra.common.dto.sys.FeeGetDataSetRespDTO;
import com.egintra.common.repository.entity.FeeInvoice;
import com.egintra.common.repository.entity.FeeInvoiceDetail;
import com.egintra.common.repository.entity.RightUser;
import com.egintra.common.repository.mapper.AccountMapper;
import com.egintra.common.repository.mapper.BusinessMapper;
import com.egintra.common.repository.mapper.FeeDrvjkMapper;
import com.egintra.common.repository.mapper.FeeGetDataSetMapper;
import com.egintra.common.repository.mapper.FeeInvoiceDetailMapper;
import com.egintra.common.repository.mapper.InvoiceMapper;
import com.egintra.common.repository.mapper.LoginMapper;
import com.egintra.common.repository.mapper.UploadinfoMapper;
import com.egintra.common.repository.mapper.VehicleOnlinePayMapper;
import com.egintra.common.repository.mapper.VehiclePayMapper;
import com.egintra.common.utils.DataReuslt;
import com.egintra.common.utils.DateUtils;
import com.egintra.common.utils.WebServiceUtil;
import com.egintra.common.utils.XmlFileUtils;
import com.egintra.common.utils.XmlUtils;
import com.egintra.feeService.business.service.BusinessService;
import com.egintra.feeService.sys.user.service.SysUserService;
import io.swagger.models.auth.In;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Service
public class BusinessServiceImpl implements BusinessService {

    @Resource
    private BusinessMapper businessMapper;

    @Resource
    private AccountMapper accountMapper;
    @Resource
    private InvoiceMapper invoiceMapper;

    @Resource
    private FeeInvoiceDetailMapper detailMapper;

    @Resource
    private VehiclePayMapper vehiclePayMapper;
    @Resource
    private FeeGetDataSetMapper feeGetDataSetMapper;

    @Resource
    private FeeDrvjkMapper feeDrvjkMapper;
    @Resource
    private VehicleOnlinePayMapper vehicleOnlinePayMapper;

    @Resource
    private SysUserService sysUserService;

    @Value("${vehvalidate}")
    private String vehvalidate;

    @Value("${drv_check_fee}")
    private String drvCheckFee;



    @Autowired
    private WebServiceUtil webServiceUtil;

    @Resource
    private UploadinfoMapper uploadinfoMapper;

    @Resource
    private LoginMapper loginMapper;

    @Override
    public DataReuslt getBusinessList(BusinessPaymentReqDTO businessPayment) {
        String params = businessPayment.getParams();
        //获取当前系统日期】
        SysDateReqDTO sysDate = businessMapper.getSysDate();
        RightUserDTO rightUserDTO = new RightUserDTO();
        rightUserDTO.setId(businessPayment.getUserId());
        RightUser rightUser = loginMapper.getUserById(rightUserDTO);
        // 回去当前用户账套的信息
        String accoutId = rightUser.getAccountId();
        AccountReqDTO accountReqDTO = accountMapper.getOne(accoutId);
        Date workDate = accountReqDTO.getWorkDate();
        String strDay = sysDate.getStrDay().replace(".", "-");
        Date nowDate = DateUtils.parseDates(strDay);
        //系统时间大于账套时间 更新账套时间
        if (nowDate.getTime() > workDate.getTime()) {
            AccountReqDTO account = new AccountReqDTO();
            account.setWorkDate(nowDate);
            account.setAccountId(accoutId);
            accountMapper.updateAccountById(account);
        }
        if (StringUtils.isNotBlank(params)) {
            //判断是流水号还是身份证号码
            if (params.length() == 13) { //流水号
                //获取第一个字符
                char one = params.charAt(0);
                if ("1".equals(String.valueOf(one))) { // 机动车
                    FeeGetDataSetRespDTO feeGetDataSetRespDTO = feeGetDataSetMapper.getOneByModelId(vehvalidate);
                    if (feeGetDataSetRespDTO == null) {
                        return DataReuslt.fail("模块id不存在");
                    }
                    String dataFrom = feeGetDataSetRespDTO.getDatafrom();
                    if ("1".equals(dataFrom)) { // 综合平台webservice方式
                        // 根据流水号调用平台接口01c25接口 获取信息 glbm,hpzl,ywlxx,ywyy
                        return requesWebServiceXml(params, "1", rightUser);
                    }
                } else if ("2".equals(String.valueOf(one))) { //驾驶证
                    FeeGetDataSetRespDTO feeGetDataSetRespDTO = feeGetDataSetMapper.getOneByModelId(vehvalidate);
                    if (feeGetDataSetRespDTO == null) {
                        return DataReuslt.fail("模块id不存在");
                    }
                    return requesWebServiceXml(params, "2", rightUser);
                }
            } else { //身份号码
                FeeGetDataSetRespDTO feeGetDataSetRespDTO = feeGetDataSetMapper.getOneByModelId(drvCheckFee);
                if (feeGetDataSetRespDTO == null) {
                    return DataReuslt.fail("模块id不存在");
                }
                return requestServiceSfzhmXml(params, rightUser);
            }
        } else {
            return DataReuslt.fail("参数不能为空");
        }
        return DataReuslt.success();
    }

    /**
     * 解析身份证号码
     *
     * @param params
     * @return
     */
    public DataReuslt requestServiceSfzhmXml(String params, RightUser rightUser) {
        List<FeeDrvjkMeterialRespDTO> respList = new ArrayList<>();
        List<Map<String, String>> list = getSfzhmXmlMap(params);
        String body = list.get(0).get("body");
        if ("body.".equals(body)) {
            list.remove(0);
            // 测试使用数据 部署到正式环境 删除该代码
            DataReuslt dataReuslt = getSfzhm(params, list);
            if (!"000000".equals(dataReuslt.getCode())) {
                return dataReuslt.fail("身份证号码不存在");
            }
            for (Map<String, String> stringStringMap : list) {
                String xygw = stringStringMap.get("xygw");
                if (!"O".equals(xygw) && !"Q".equals(xygw)) {
                    String ywlx = stringStringMap.get("ywlx");
                    String ywyy = stringStringMap.get("ywyy");
                    String zjcx = stringStringMap.get("zjcx");
                    String lsh = stringStringMap.get("lsh");
                    String sfzmhm = stringStringMap.get("sfzmhm");
                    String xm = stringStringMap.get("xm");
                    // 判断是否缴费
                    InvoiceReqDTO invoiceTmpDTO = invoiceMapper.isPaymentNot(lsh);
                    if (invoiceTmpDTO != null) {
                        if (!"1".equals(invoiceTmpDTO.getStatus())) {
                            respList = getFeeDrvjkMeterialRespDTOList(zjcx, ywlx, ywyy, lsh, respList, xm,sfzmhm);
                        } else {
                            return DataReuslt.success("已缴费");
                        }
                    } else {
                        respList = getFeeDrvjkMeterialRespDTOList(zjcx, ywlx, ywyy, lsh, respList, xm,sfzmhm);
                    }

                }
            }
            String accountId = rightUser.getAccountId();
            AccountReqDTO account = accountMapper.getOne(accountId);
            Map map = new HashMap();
            map.put("list", respList);
            return DataReuslt.success(map);
        } else {
            return DataReuslt.fail("身份证号输入不正确");
        }
    }

    /**
     * 公共方法
     *
     * @param zjcx
     * @param ywlx
     * @param ywyy
     * @param lsh
     * @param respList
     * @return
     */
    public List<FeeDrvjkMeterialRespDTO> getFeeDrvjkMeterialRespDTOList(String zjcx, String ywlx, String ywyy, String lsh, List<FeeDrvjkMeterialRespDTO> respList, String xm,String sfzmhm) {
        FeeDrvjkReqDTO feeDrvjkReqDTO = new FeeDrvjkReqDTO();
        feeDrvjkReqDTO.setZjcx(zjcx);
        feeDrvjkReqDTO.setYwlx(ywlx);
        feeDrvjkReqDTO.setYwyy(ywyy);
        respList = feeDrvjkMapper.queryDriverLicensePaymentInfo(feeDrvjkReqDTO);
        respList.forEach(feeDrvjkMeterialRespDTO -> {
            feeDrvjkMeterialRespDTO.setLsh(lsh);
            feeDrvjkMeterialRespDTO.setXm(xm);
            feeDrvjkMeterialRespDTO.setSfzhm(sfzmhm);
        });
        return respList;
    }

    /**
     * 解析流水号
     *
     * @param params
     * @return
     * @type type 1 机动车 2 流水号
     */
    public DataReuslt requesWebServiceXml(String params, String type, RightUser user) {
        // 根据流水号调用平台接口01c25接口 获取信息 glbm,hpzl,ywlxx,ywyy
        Map<String, String> xmlMap = getXmlMap(params, type);
        // 测试数据 部署到正式环境需要删除
        if ("1".equals(type)) {
            if (!params.equals(xmlMap.get("body.veh.lsh"))) {
                return DataReuslt.fail("流水号不存在");
            }
        } else {
            if (!params.equals(xmlMap.get("body.drv.lsh"))) {
                return DataReuslt.fail("流水号不存在");
            }
        }
        String code = xmlMap.get("head.code");
        if ("1".equals(code)) {
            String num = xmlMap.get("head.rownum");
            if (Integer.parseInt(num) != 0) {
                InvoiceReqDTO invoiceReqDTO = invoiceMapper.isPaymentNot(params);
                if (invoiceReqDTO != null) {
                    // 核查是否已经缴费
                    String status = invoiceReqDTO.getStatus();
                    if ("0".equals(status)) {
                        return getRestList(type, xmlMap, user);
                    } else {
                        return DataReuslt.success("已缴费");
                    }
                } else {
                    return getRestList(type, xmlMap, user);
                }
            } else {
                return DataReuslt.fail("流水号输入不正确");
            }
        }
        return DataReuslt.success();
    }

    /**
     * 获取需要缴费的数据
     *
     * @param type
     * @param xmlMap
     * @return
     */
    public DataReuslt getRestList(String type, Map<String, String> xmlMap, RightUser rightUser) {
        Map map = new HashMap();
        if ("1".equals(type)) {
            String ywlx = xmlMap.get("body.veh.ywlx");
            String ywyy = xmlMap.get("body.veh.ywyy");
            String hpzl = xmlMap.get("body.veh.hpzl");
            String hphm = xmlMap.get("body.veh.hphm");
            String lsh = xmlMap.get("body.veh.lsh");
            VehiclePayReqDTO vehiclePayReqDTO = new VehiclePayReqDTO();
            vehiclePayReqDTO.setYwlx(ywlx);
            vehiclePayReqDTO.setYwyy(ywyy);
            vehiclePayReqDTO.setHpzl(hpzl);
            // 未缴费
            List<VehiclePayReqDTO> vehiclePayList = vehiclePayMapper.getVehiclePayList(vehiclePayReqDTO);
            vehiclePayList.forEach(vehiclePayReqDTO1 -> {
                vehiclePayReqDTO1.setLsh(lsh);
                vehiclePayReqDTO1.setHphm(hphm);
                vehiclePayReqDTO1.setPrice("");
            });
            map.put("list", vehiclePayList);
        } else {
            String ywlx = xmlMap.get("body.drv.ywlx");
            String ywyy = xmlMap.get("body.drv.ywyy");
            String zjcx = xmlMap.get("body.drv.zjcx");
            String lsh = xmlMap.get("body.drv.lsh");
            String xm = xmlMap.get("body.drv.xm");
            String sfzmhm = xmlMap.get("body.drv.sfzmhm");
            FeeDrvjkReqDTO feeDrvjkReqDTO = new FeeDrvjkReqDTO();
            feeDrvjkReqDTO.setZjcx(zjcx);
            feeDrvjkReqDTO.setYwlx(ywlx);
            feeDrvjkReqDTO.setYwyy(ywyy);
            List<FeeDrvjkMeterialRespDTO> respDTOS = feeDrvjkMapper.queryDriverLicensePaymentInfo(feeDrvjkReqDTO);
            respDTOS.forEach(feeDrvjkMeterialRespDTO -> {
                feeDrvjkMeterialRespDTO.setLsh(lsh);
                feeDrvjkMeterialRespDTO.setXm(xm);
                feeDrvjkMeterialRespDTO.setSfzhm(sfzmhm);
                feeDrvjkMeterialRespDTO.setPrice("");
            });
            map.put("list", respDTOS);
        }
        return DataReuslt.success(map);
    }

    /**
     * 测试数据  正式环境需要删除
     *
     * @param params
     * @param list
     * @return
     */
    public DataReuslt getSfzhm(String params, List<Map<String, String>> list) {
        Map<String, String> map = list.get(1);
        String sfzmhm = map.get("sfzmhm");
        if (!params.equals(sfzmhm)) {
            return DataReuslt.fail("身份证号输入不正确");
        } else {
            return DataReuslt.success();
        }
    }

    /**
     * 驾驶证流水号
     */
    String dxml = "<?xml version=\"1.0\" encoding=\"GBK\"?>\n" +
            "<root>\n" +
            "<head>\n" +
            "<code>1</code>\n" +
            "<message>%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F%EF%BC%81</message>\n" +
            "<rownum>1</rownum>\n" +
            "</head>\n" +
            "<body>\n" +
            "<drv id=\"0\">\n" +
            "  <lsh>2210802443940</lsh>\n" +
            "  <sfzmhm>37040220010202608X</sfzmhm>\n" +
            "  <dabh></dabh>\n" +
            "  <xm>张三</xm>\n" +
            "  <ywlx>A</ywlx>\n" +
            "  <ywyy>A</ywyy>\n" +
            "  <kssj>2021-08-02+09%3A51%3A37.0</kssj>\n" +
            "  <jssj></jssj>\n" +
            "  <ywgw>ABCGE</ywgw>\n" +
            "  <kskm>010101</kskm>\n" +
            "  <xygw>C</xygw>\n" +
            "  <glbm>370402000400</glbm>\n" +
            "  <ffbz>0</ffbz>\n" +
            "  <rkbz>0</rkbz>\n" +
            "  <hdbz>A</hdbz>\n" +
            "  <xgzl></xgzl>\n" +
            "  <zjcx>C1</zjcx>\n" +
            "  <ywzt>A</ywzt>\n" +
            "  <ywblbm>370402000400</ywblbm>\n" +
            "  <fzjg>%E9%B2%81D</fzjg>\n" +
            "</drv>\n" +
            "</body>\n" +
            "</root>";

    /**
     * 机动车流水号
     */
    String xml = "<?xml version=\"1.0\" encoding=\"GBK\"?>\n" +
            "<root>\n" +
            "<head>\n" +
            "<code>1</code>\n" +
            "<message>%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F%EF%BC%81</message>\n" +
            "<rownum>1</rownum>\n" +
            "</head>\n" +
            "<body>\n" +
            "<veh id=\"0\">\n" +
            "  <lsh>1210806019988</lsh>\n" +
            "  <xh>37040007001292</xh>\n" +
            "  <ywlx>K</ywlx>\n" +
            "  <ywyy>A</ywyy>\n" +
            "  <syr>%E6%9D%8E%E7%BA%A2%E4%BA%91</syr>\n" +
            "  <hpzl>02</hpzl>\n" +
            "  <hphm>DS0069</hphm>\n" +
            "  <clpp1>%E9%A3%9E%E5%BA%A6%E7%89%8C</clpp1>\n" +
            "  <clxh>HG7132A%28i-DSI+CVT%29</clxh>\n" +
            "  <cllx>K33</cllx>\n" +
            "  <xzqh>370403</xzqh>\n" +
            "  <sqrq>2021-08-06+10%3A44%3A13.0</sqrq>\n" +
            "  <bjrq>2021-08-06+10%3A55%3A37.0</bjrq>\n" +
            "  <xygw>E</xygw>\n" +
            "  <ywlc>25E</ywlc>\n" +
            "  <lszt>E</lszt>\n" +
            "  <glbm>370402000400</glbm>\n" +
            "  <fpbj>0</fpbj>\n" +
            "  <ffbj>0</ffbj>\n" +
            "  <rkbj>0</rkbj>\n" +
            "  <clsbdh>LHGGD182772011600</clsbdh>\n" +
            "</veh>\n" +
            "</body>\n" +
            "</root>";


    /**
     * 身份证号码
     */
    String sfzhmxml = "<?xml version=\"1.0\" encoding=\"GBK\"?>\n" +
            "<root>\n" +
            "<head>\n" +
            "<code>1</code>\n" +
            "<message>%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F%EF%BC%81</message>\n" +
            "<rownum>4</rownum>\n" +
            "</head>\n" +
            "<body>\n" +
            "<drv id=\"0\">\n" +
            "  <lsh>2D00613110691</lsh>\n" +
            "  <sfzmhm>370481198810018537</sfzmhm>\n" +
            "  <dabh>370400918919</dabh>\n" +
            "  <xm>李四</xm>\n" +
            "  <ywlx>F</ywlx>\n" +
            "  <ywyy>A</ywyy>\n" +
            "  <kssj>2010-06-13+09%3A22%3A24.0</kssj>\n" +
            "  <jssj>2010-06-13+11%3A29%3A32.0</jssj>\n" +
            "  <ywgw>ABCE</ywgw>\n" +
            "  <kskm>010000</kskm>\n" +
            "  <xygw>O</xygw>\n" +
            "  <glbm>370400000400</glbm>\n" +
            "  <ffbz></ffbz>\n" +
            "  <rkbz></rkbz>\n" +
            "  <hdbz></hdbz>\n" +
            "  <xgzl>I</xgzl>\n" +
            "  <zjcx>C1</zjcx>\n" +
            "  <ywzt>A</ywzt>\n" +
            "  <ywblbm>370400000400</ywblbm>\n" +
            "  <fzjg>%E9%B2%81D</fzjg>\n" +
            "</drv>\n" +
            "<drv id=\"1\">\n" +
            "  <lsh>2190304915227</lsh>\n" +
            "  <sfzmhm>370481198810018537</sfzmhm>\n" +
            "  <dabh>370400918919</dabh>\n" +
            "  <xm>王五</xm>\n" +
            "  <ywlx>C</ywlx>\n" +
            "  <ywyy>A</ywyy>\n" +
            "  <kssj>2019-03-04+15%3A10%3A06.0</kssj>\n" +
            "  <jssj>2019-03-04+15%3A38%3A33.0</jssj>\n" +
            "  <ywgw>AGE</ywgw>\n" +
            "  <kskm>000000</kskm>\n" +
            "  <xygw>O</xygw>\n" +
            "  <glbm>370400000400</glbm>\n" +
            "  <ffbz>3</ffbz>\n" +
            "  <rkbz></rkbz>\n" +
            "  <hdbz></hdbz>\n" +
            "  <xgzl>ABCM</xgzl>\n" +
            "  <zjcx>C1</zjcx>\n" +
            "  <ywzt>A</ywzt>\n" +
            "  <ywblbm>370481000400</ywblbm>\n" +
            "  <fzjg>%E9%B2%81D</fzjg>\n" +
            "</drv>\n" +
            "<drv id=\"2\">\n" +
            "  <lsh>2160324731855</lsh>\n" +
            "  <sfzmhm>370481198810018537</sfzmhm>\n" +
            "  <dabh>370400918919</dabh>\n" +
            "  <xm>哈哈</xm>\n" +
            "  <ywlx>C</ywlx>\n" +
            "  <ywyy>EF</ywyy>\n" +
            "  <kssj>2016-03-24+16%3A42%3A22.0</kssj>\n" +
            "  <jssj>2016-03-24+17%3A02%3A35.0</jssj>\n" +
            "  <ywgw>AGE</ywgw>\n" +
            "  <kskm>000000</kskm>\n" +
            "  <xygw>O</xygw>\n" +
            "  <glbm>370400000400</glbm>\n" +
            "  <ffbz>3</ffbz>\n" +
            "  <rkbz></rkbz>\n" +
            "  <hdbz></hdbz>\n" +
            "  <xgzl>ABZ</xgzl>\n" +
            "  <zjcx>C1</zjcx>\n" +
            "  <ywzt>A</ywzt>\n" +
            "  <ywblbm>370481000400</ywblbm>\n" +
            "  <fzjg>%E9%B2%81D</fzjg>\n" +
            "</drv>\n" +
            "<drv id=\"3\">\n" +
            "  <lsh>2130319517247</lsh>\n" +
            "  <sfzmhm>370481198810018537</sfzmhm>\n" +
            "  <dabh>370400918919</dabh>\n" +
            "  <xm>测试</xm>\n" +
            "  <ywlx>C</ywlx>\n" +
            "  <ywyy>A</ywyy>\n" +
            "  <kssj>2013-03-19+16%3A08%3A10.0</kssj>\n" +
            "  <jssj>2013-03-19+16%3A56%3A20.0</jssj>\n" +
            "  <ywgw>AGE</ywgw>\n" +
            "  <kskm>000000</kskm>\n" +
            "  <xygw>A</xygw>\n" +
            "  <glbm>370400000400</glbm>\n" +
            "  <ffbz>3</ffbz>\n" +
            "  <rkbz></rkbz>\n" +
            "  <hdbz></hdbz>\n" +
            "  <xgzl>BC</xgzl>\n" +
            "  <zjcx>C1</zjcx>\n" +
            "  <ywzt>A</ywzt>\n" +
            "  <ywblbm>370481000400</ywblbm>\n" +
            "  <fzjg>%E9%B2%81D</fzjg>\n" +
            "</drv>\n" +
            "</body>\n" +
            "</root>\n";

    /**
     * 解析xml字符串数据
     *
     * @return
     */
    public Map<String, String> getXmlMap(String lsh, String type) {
        try {
            VechicleDTO vechicleDTO = new VechicleDTO();
            vechicleDTO.setLsh(lsh);
            String str = XmlFileUtils.selectXmlDoc(vechicleDTO);
            String queryXmlDoc = String.format("%s%s%s", XmlFileUtils.getXmlFileHead(), str, XmlFileUtils.getXmlFileFoot());
            // 调用综合平台返回的结果
//            String result = webServiceUtil.queryCallWeb("01", "02C16", queryXmlDoc);
            Map<String, String> map = new HashMap<String, String>();
            Map<String, String> xmlMap = new HashMap<>();
            if ("1".equals(type)) { // 机动车
                xmlMap = XmlUtils.parseXml2Map(xml, map);
            } else { //流水号
                xmlMap = XmlUtils.parseXml2Map(dxml, map);
            }


            return xmlMap;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    /**
     * 解析xml字符串数据
     *
     * @return
     */
    public List<Map<String, String>> getSfzhmXmlMap(String sfzhm) {
        DriversDTO driversDTO = new DriversDTO();
        driversDTO.setSfzhm(sfzhm);
        try {
            String str = XmlFileUtils.selectXmlDoc(driversDTO);
            String queryXmlDoc = String.format("%s%s%s", XmlFileUtils.getXmlFileHead(), str, XmlFileUtils.getXmlFileFoot());
            // 调用综合平台返回的结果
//            String result = webServiceUtil.queryCallWeb("01", "02C15", queryXmlDoc);
            List<Map<String, String>> list = new ArrayList<>();
            List<Map<String, String>> list1 = XmlUtils.parseXml2List(sfzhmxml, list);
            List<Map<String, String>> mapList = XmlUtils.removeRepeatMapByKey(list1, "lsh");
            return mapList;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public DataReuslt payBusiness(Map<String, Object> body) {
        String params = body.get("params").toString();
        String payType = body.get("payType").toString();
        String payUnit = body.get("payUnit").toString();
        String totalMoney = body.get("totalMoney").toString();
        String userId = body.get("userId").toString();
        RightUserDTO rightUserDTO = new RightUserDTO();
        rightUserDTO.setId(userId);
        RightUser rightUser = loginMapper.getUserById(rightUserDTO);
        List<Map<String, Object>> drvs = (List<Map<String, Object>>) body.get("drvs");
        BusinessPaymentReqDTO businessPayment = new BusinessPaymentReqDTO();
        businessPayment.setParams(params);
        businessPayment.setPayType(payType);
        businessPayment.setPayUnit(payUnit);
        businessPayment.setDrvs(drvs);
        businessPayment.setTotalMoney(Double.parseDouble(totalMoney));
        // 现金支付
        if ("1".equals(payType)) {
            if (params.length() == 13) { //流水号
                //获取第一个字符
                char one = params.charAt(0);
                if ("1".equals(String.valueOf(one))) { // 机动车
                    // 记账加解锁
                    addInvoice(businessPayment, "1", rightUser);
                } else if ("2".equals(String.valueOf(one))) { //驾驶证
                    // 记账加解锁
                    addInvoice(businessPayment, "2", rightUser);
                }
            } else { //身份证号码
                // 记账加解锁
                addInvoice(businessPayment, "3", rightUser);
            }
            return DataReuslt.success("缴费成功");
        } else { // pos支付
            return DataReuslt.success("缴费成功");
        }
    }

    /**
     * 记账并解锁
     *
     * @param business
     * @param type
     */
    public void addInvoice(BusinessPaymentReqDTO business, String type, RightUser user) {
        DataReuslt dataReuslt = null;
        if (!"3".equals(type)) { // 机动车，驾驶证流水号
            dataReuslt = requesWebServiceXml(business.getParams(), type, user);
        } else { // 身份证号
            dataReuslt = requestServiceSfzhmXml(business.getParams(), user);
        }
        Map map = (Map) dataReuslt.getData();
        List<FeeInvoice> invoiceReqDTOS = new ArrayList<>();
        List<FeeInvoiceDetail> details = new ArrayList<>();
        AccountReqDTO accountReqDTO = accountMapper.getOne(user.getAccountId());
        List<FeeDrvjkMeterialRespDTO> respDTOS = new ArrayList<>();
        VUnlockReqDTO unlock = new VUnlockReqDTO();
        if ("1".equals(type)) {
            List<VehiclePayReqDTO> vehiclePayReqDTOS = (List<VehiclePayReqDTO>) map.get("list");
            VehiclePayReqDTO vehicle = vehiclePayReqDTOS.get(0);
            unlock.setHpzl(vehicle.getHpzl());
            unlock.setHphm(vehicle.getHphm());
            unlock.setLsh(vehicle.getLsh());
            FeeInvoice feeInvoice = getInvoice(accountReqDTO, business, user, vehicle.getHphm(), vehicle.getMaterialCost());
            feeInvoice.setLsh(vehicle.getLsh());
            feeInvoice.setCxhp(vehicle.getHpzl());
            feeInvoice.setYwlx(vehicle.getYwlx());
            feeInvoice.setYwyy(vehicle.getYwyy());
            feeInvoice.setYwlb("1");
            invoiceReqDTOS.add(feeInvoice);
            vehiclePayReqDTOS.forEach(vehiclePayReqDTO -> {
                FeeInvoiceDetail feeInvoiceDetail = getFeeInvoiceDetail(accountReqDTO, feeInvoice.getId());
                feeInvoiceDetail.setProjectId(vehiclePayReqDTO.getProjectId());
                feeInvoiceDetail.setProjectName(vehiclePayReqDTO.getProjectName());
                feeInvoiceDetail.setQuantity(String.valueOf(vehiclePayReqDTO.getQuantity()));
                feeInvoiceDetail.setClassId(vehiclePayReqDTO.getClassId());
                feeInvoiceDetail.setProvinceRate(vehiclePayReqDTO.getProvinceRate());
                feeInvoiceDetail.setUnitPrice(String.valueOf(vehiclePayReqDTO.getUnitPrice()));
                feeInvoiceDetail.setCityRate(vehiclePayReqDTO.getCityRate());
                feeInvoiceDetail.setMaterialCost(String.valueOf(vehiclePayReqDTO.getMaterialCost()));
                feeInvoiceDetail.setFinanceCode(vehiclePayReqDTO.getFinanceCode());
                feeInvoiceDetail.setPayWay("01");
                details.add(feeInvoiceDetail);
            });

        } else {
            respDTOS = (List<FeeDrvjkMeterialRespDTO>) map.get("list");
            FeeDrvjkMeterialRespDTO dto = respDTOS.get(0);
            FeeInvoice feeInvoice = getInvoice(accountReqDTO, business, user, dto.getXm(), dto.getCost());
            business.setParams(dto.getLsh());
            feeInvoice.setLsh(dto.getLsh());
            feeInvoice.setSfzmhm(dto.getSfzhm());
            feeInvoice.setCxhp(dto.getZjcx());
            feeInvoice.setYwlx(dto.getYwlx());
            feeInvoice.setYwyy(dto.getYwyy());
            feeInvoice.setYwlb("2");
            invoiceReqDTOS.add(feeInvoice);
            respDTOS.forEach(feeDrvjkMeterialRespDTO -> {
                FeeInvoiceDetail feeInvoiceDetail = getFeeInvoiceDetail(accountReqDTO, feeInvoice.getId());
                feeInvoiceDetail.setProjectId(feeDrvjkMeterialRespDTO.getProjectId());
                feeInvoiceDetail.setProjectName(feeDrvjkMeterialRespDTO.getProjectName());
                feeInvoiceDetail.setQuantity(String.valueOf(feeDrvjkMeterialRespDTO.getQuantity()));
                feeInvoiceDetail.setClassId(feeDrvjkMeterialRespDTO.getClassId());
                feeInvoiceDetail.setProvinceRate(feeDrvjkMeterialRespDTO.getProvinceRate());
                feeInvoiceDetail.setUnitPrice(String.valueOf(feeDrvjkMeterialRespDTO.getUnitPrice()));
                feeInvoiceDetail.setCityRate(feeDrvjkMeterialRespDTO.getCityRate());
                feeInvoiceDetail.setMaterialCost(String.valueOf(feeDrvjkMeterialRespDTO.getCost()));
                feeInvoiceDetail.setFinanceCode(feeDrvjkMeterialRespDTO.getFinanceCode());
                feeInvoiceDetail.setPayWay("01");
                details.add(feeInvoiceDetail);
            });
        }
        // 记账
        bookkeeping(invoiceReqDTOS, details, accountReqDTO);
        // 解锁记录日志
        if ("1".equals(type)) {
            // 解锁
            unlock.setBz(String.valueOf(business.getTotalMoney()));
            Map<String, String> resultMap = vehicleUnlock(unlock);
            String code = resultMap.get("head.code");
            String msg = resultMap.get("head.message");
            // 失败 记录日志
            if ("0".equals(code)) {
                // 解锁 机动车   记录错误日志
                try {
                    String sfxm = "机动车缴费";
                    unlockLog(accountReqDTO, business, user, code, msg, type, sfxm);
                } catch (UnknownHostException e) {
                    e.printStackTrace();
                }
            }
        } else {
            // 解锁 驾驶证
            List<Map<String, Object>> list = business.getDrvs();
            for (Map<String, Object> dto : list) {
                Integer quantity = Integer.parseInt(dto.get("quantity").toString());
                for (int i = 0; i < quantity; i++) {
                    DUnlockReqDTO dUnlock = new DUnlockReqDTO();
                    dUnlock.setSfxm(getFeeCodeCk(dto.get("projectId").toString()));
                    dUnlock.setJe(Double.parseDouble(dto.get("unitPrice").toString()));
                    dUnlock.setSfr(user.getName());
                    dUnlock.setSfsj(new Date());
                    dUnlock.setBj("1");
                    dUnlock.setLsh(business.getParams());
                    // 循环调用
                    Map<String, String> resultMap = driverLicenseUnlock(dUnlock);
                    String code = resultMap.get("head.code");
                    String msg = resultMap.get("head.message");
                    if ("0".equals(code)) {
                        try {
                            // 记录错误日志
                            String sfxm = "驾驶证缴费";
                            unlockLog(accountReqDTO, business, user, code, msg, type, sfxm);
                        } catch (UnknownHostException e) {
                            e.printStackTrace();
                        }
                    }
                }

            }
        }
    }


    /**
     * 封裝发票主表实体
     *
     * @param accountReqDTO
     * @param business
     * @param user
     * @param xm
     * @param cost
     * @return
     */
    public FeeInvoice getInvoice(AccountReqDTO accountReqDTO, BusinessPaymentReqDTO business, RightUser user, String xm, double cost) {
        String invoiceId = vehicleOnlinePayMapper.getTmpId();
        FeeInvoice feeInvoice = new FeeInvoice();
        feeInvoice.setId(invoiceId);
        feeInvoice.setDepartment(accountReqDTO.getDepartmentId());
        feeInvoice.setAccountId(accountReqDTO.getAccountId());
        feeInvoice.setInvoiceId(accountReqDTO.getFictitiousId());
        feeInvoice.setPayUnit(xm);
        feeInvoice.setPayWay("01");
        feeInvoice.setPosid("");
        feeInvoice.setDtimes(accountReqDTO.getWorkDate());
        feeInvoice.setReceiveAccount(accountReqDTO.getReceiveAccount());
        feeInvoice.setCheckNumber(accountReqDTO.getFictitiousId());
        feeInvoice.setPosInfo("");
        feeInvoice.setTotalMoney(String.valueOf(business.getTotalMoney()));
        feeInvoice.setTotalPure(String.valueOf(business.getTotalMoney() - cost));
        feeInvoice.setReceiver(user.getName());
        feeInvoice.setReceiverId(user.getNo());
        feeInvoice.setDates(accountReqDTO.getWorkDate());
        feeInvoice.setStatus("1");
        feeInvoice.setTypes("1");
        feeInvoice.setSfzmhm("");
        return feeInvoice;
    }

    /**
     * 封装发票明细实体
     *
     * @param accountReqDTO
     * @param invoiceId
     * @return
     */
    public FeeInvoiceDetail getFeeInvoiceDetail(AccountReqDTO accountReqDTO, String invoiceId) {
        String invoiceDetailId = vehicleOnlinePayMapper.getTmpDetailId();
        FeeInvoiceDetail feeInvoiceDetail = new FeeInvoiceDetail();
        feeInvoiceDetail.setId(invoiceDetailId);
        feeInvoiceDetail.setPaperId("");
        feeInvoiceDetail.setDepartment(accountReqDTO.getDepartmentId());
        feeInvoiceDetail.setInvoiceId(accountReqDTO.getFictitiousId());
        feeInvoiceDetail.setFeeInvoiceId(invoiceId);
        feeInvoiceDetail.setAccountId(accountReqDTO.getAccountId());
        feeInvoiceDetail.setDates(accountReqDTO.getWorkDate());
        feeInvoiceDetail.setStatus("1");
        return feeInvoiceDetail;
    }


    //初次缴费项目判断
    public static String getFeeCodeCk(String dmz) {
        String codes = "";
        //3201(机动车驾驶证):	201(制证费用)
        if ("3201".equals(dmz)) {
            codes = "201";
            //3501(安全教育培训费):	201(制证费用)
        } else if ("3501".equals(dmz)) {
            codes = "201";
            //32021(科一):		202(科目一费用)
        } else if ("32021".equals(dmz) || "32041".equals(dmz)) {
            codes = "202";
            //32022(汽车科二):	203(科目二费用)
        } else if ("32022".equals(dmz) || "32042".equals(dmz)) {
            codes = "203";
            //32023(汽车科三):	204(科目三费用)
        } else if ("32023".equals(dmz) || "32043".equals(dmz)) {
            codes = "204";
            //32024(科四):		208(安全文费用)
        } else if ("32024".equals(dmz) || "32044".equals(dmz)) {
            codes = "208";
            //32042(其他科二):	203(科目二费用)
            //}else if("32042".equals(dmz)){
            //	codes="203";
            //32043(其他科三):	204(科目三费用)
            //}else if("32043".equals(dmz)){
            //	codes="204";
        } else {
            codes = "";
        }
        return codes;
    }

    /**
     * 32021(科一):		202(科目一费用)		bk:205 科目一补考费；
     * 32022(汽车科二):	203(科目二费用)		bk:206 科目二补考费；
     * 32023(汽车科三):	204(科目三费用)		bk:207 科目三实际道路补考费；
     * 32024(科四):		208(安全文费用)		bk:209 科目三安全文明补考费用。
     * 32042(其他科二):	203(科目二费用)		bk:206 科目二补考费；
     * 32043(其他科三):	204(科目三费用)		bk:207 科目三实际道路补考费；
     */

//补考缴费项目判断
    public static String getFeeCodeBk(String dmz) {
        String codes = "";
        //32021(科一)  bk:205 科目一补考费；
        if ("32021".equals(dmz) || "32041".equals(dmz)) {
            codes = "205";
            //32022(汽车科二):	bk:206 科目二补考费；
        } else if ("32022".equals(dmz) || "32042".equals(dmz)) {
            codes = "206";
            //32023(汽车科三):	bk:207 科目三实际道路补考费；
        } else if ("32023".equals(dmz) || "32043".equals(dmz)) {
            codes = "207";
            //32024(科四):		bk:209 科目三安全文明补考费用。
        } else if ("32024".equals(dmz) || "32044".equals(dmz)) {
            codes = "209";
            //32042(其他科二):	bk:206 科目二补考费；
            //}else if("32042".equals(dmz)){
            //	codes="206";
            //32043(其他科三):	bk:207 科目三实际道路补考费；
            //}else if("32043".equals(dmz)){
            //	codes="207";
        } else {
            codes = "";
        }
        return codes;
    }


    /**
     * 解锁 失败日志
     */
    public void unlockLog(AccountReqDTO accountReqDTO, BusinessPaymentReqDTO business, RightUser user, String code, String message, String type, String sfxm) throws UnknownHostException {
        //解锁 调用webService接口 01c74
        //添加日志记录信息 fee_uploadinfo
        UploadinfoReqDTO uploadinfoReqDTO = new UploadinfoReqDTO();
        uploadinfoReqDTO.setId(UUID.randomUUID().toString());
        uploadinfoReqDTO.setDepartId(accountReqDTO.getDepartmentId());
        uploadinfoReqDTO.setAccountId(accountReqDTO.getAccountId());
        uploadinfoReqDTO.setInvoiceId(accountReqDTO.getFictitiousId());
        uploadinfoReqDTO.setYwlb(type);
        uploadinfoReqDTO.setLsh(business.getParams());
        uploadinfoReqDTO.setSfxm(sfxm);
        uploadinfoReqDTO.setTotalMoney(business.getTotalMoney());
        uploadinfoReqDTO.setUserId(user.getId());
        InetAddress addr = InetAddress.getLocalHost();
        uploadinfoReqDTO.setUserIp(addr.getHostAddress());
        uploadinfoReqDTO.setDate(new Date());
        uploadinfoReqDTO.setCode(code);
        uploadinfoReqDTO.setMsg(message);
        uploadinfoReqDTO.setGxsj(new Date());
        uploadinfoMapper.saveUploadinfo(uploadinfoReqDTO);
    }


    /**
     * 测试数据
     */
    String writeXml = "<?xml version=\"1.0\" encoding=\"GBK\"?>\n" +
            "<root>\n" +
            "<head>\n" +
            "<code>0</code>\n" +
            "<message>请求接口失败</message>\n" +
            "<rownum>0</rownum>\n" +
            "</head>\n" +
            "<body>\n" +
            "</body>\n" +
            "</root>";

    /**
     * 解锁 写入机动车信息
     *
     * @return
     */
    public Map<String, String> vehicleUnlock(VUnlockReqDTO unlock) {

        try {
            String str = XmlFileUtils.writeXmlDoc(unlock);
            String writeXmlDoc = String.format("%s%s%s", XmlFileUtils.getXmlFileHead(), str, XmlFileUtils.getXmlFileFoot());
            // 调用综合平台返回的结果
//            String result = webServiceUtil.writeCallWeb("01", "01C74", writeXmlDoc);
            Map<String, String> map = new HashMap<>();
            Map<String, String> resultMap = XmlUtils.parseXml2Map(writeXml, map);
            return resultMap;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    /**
     * 解锁 写入驾驶证信息
     *
     * @return
     */
    public Map<String, String> driverLicenseUnlock(DUnlockReqDTO dUnlock) {

        try {
            String str = XmlFileUtils.writeXmlDoc(dUnlock);
            String writeXmlDoc = String.format("%s%s%s", XmlFileUtils.getXmlFileHead(), str, XmlFileUtils.getXmlFileFoot());
            // 调用综合平台返回的结果
//            String result = webServiceUtil.writeCallWeb("01", "02C84", writeXmlDoc);
            Map<String, String> map = new HashMap<>();
            Map<String, String> resultMap = XmlUtils.parseXml2Map(writeXml, map);
            return resultMap;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }


    /**
     * 记账 发表主表
     *
     * @param invoiceReqDTOS
     * @param details
     */
    @Transactional
    public void bookkeeping(List<FeeInvoice> invoiceReqDTOS, List<FeeInvoiceDetail> details, AccountReqDTO account) {
        invoiceMapper.batchInsertInvoices(invoiceReqDTOS);
        detailMapper.batchInsertDetails(details);
        AccountReqDTO accountReqDTO = new AccountReqDTO();
        // 每次票加1
        String fId = String.valueOf(Integer.parseInt(account.getFictitiousId()) + 1);
        accountReqDTO.setAccountId(account.getAccountId());
        accountReqDTO.setFictitiousId(fId);
        accountMapper.updateParam(accountReqDTO);
    }


    /**
     * 获取基础收费信息详情
     *
     * @param businessPayment
     * @return
     */
    @Override
    public DataReuslt getPayBasicsMessage(BusinessPaymentReqDTO businessPayment) {
        String userId = businessPayment.getUserId();
        RightUserDTO rightUserDTO = new RightUserDTO();
        rightUserDTO.setId(userId);
        RightUser rightUser = loginMapper.getUserById(rightUserDTO);
        AccountReqDTO accountReqDTO = accountMapper.getOne(rightUser.getAccountId());
        ResultReqDTO resultReq = new ResultReqDTO();
        resultReq.setPayee(rightUser.getName());
        resultReq.setReceiceAccount(accountReqDTO.getReceiveAccount());
        String workDate = DateUtils.formatDates(accountReqDTO.getWorkDate());
        String[] arr = workDate.split("-");
        String newDate = arr[0] + "年" + arr[1] + "月" + arr[2] + "日";
        resultReq.setWorkDate(newDate);
        resultReq.setNoA("");
        resultReq.setFictitiousId(accountReqDTO.getFictitiousId());
        return DataReuslt.success(resultReq);
    }
}
