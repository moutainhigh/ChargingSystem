package com.egintra.feeService.projectdetail.service.impl;

import com.egintra.common.dto.MaterialReqDTO;
import com.egintra.common.dto.ProjectDetailReqDTO;
import com.egintra.common.repository.mapper.MaterialMapper;
import com.egintra.common.repository.mapper.ProjectDetailMapper;
import com.egintra.common.utils.DataReuslt;
import com.egintra.common.utils.DateUtils;
import com.egintra.feeService.config.PageResult;
import com.egintra.feeService.projectdetail.service.ProjectDetailService;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.List;

@Service
public class ProjectDetailServiceImpl implements ProjectDetailService {

    @Resource
    private ProjectDetailMapper projectDetailMapper;

    @Resource
    private MaterialMapper materialMapper;


    @Override
    public DataReuslt getProjectDetailList(ProjectDetailReqDTO projectDetailReqDTO) {
        Page ps = PageHelper.startPage(projectDetailReqDTO.getPage(), projectDetailReqDTO.getSize());
        List<ProjectDetailReqDTO> detailReqDTOS = projectDetailMapper.getProjectDetailList(projectDetailReqDTO);
        PageResult<ProjectDetailReqDTO> result = new PageResult<ProjectDetailReqDTO>();
        result.setRows(detailReqDTOS);
        result.setTotal(ps.getTotal());
        result.setPages(ps.getPages());
        result.setCurrentPage(projectDetailReqDTO.getPage());
        return DataReuslt.success(result);
    }

    @Override
    public DataReuslt getProjectDetailLists(ProjectDetailReqDTO projectDetailReqDTO) {
        List<ProjectDetailReqDTO> departments = projectDetailMapper.getProjectDetailList(projectDetailReqDTO);
        return DataReuslt.success(departments);
    }

    @Override
    @Transactional
    public DataReuslt addProjectDetail(ProjectDetailReqDTO projectDetailReqDTO) {
        ProjectDetailReqDTO project = projectDetailMapper.getOne(projectDetailReqDTO.getProjectId());
        if (project != null) {
            return DataReuslt.fail("0", "项目明细编号已经存在");
        }
        ProjectDetailReqDTO name = projectDetailMapper.findByName(projectDetailReqDTO.getProjectName());
        if (name != null) {
            return DataReuslt.fail("0", "项目明细名称已经存在");
        }
        String curDate = DateUtils.getCurDate();
        projectDetailReqDTO.setRecordCreateTm(curDate);
        projectDetailReqDTO.setRecordModifyTm(curDate);
        projectDetailReqDTO.setRecordStatus("0");
        projectDetailMapper.addProjectDetail(projectDetailReqDTO);
        return DataReuslt.success(projectDetailReqDTO);
    }

    @Override
    @Transactional
    public DataReuslt editProjectDetail(List<ProjectDetailReqDTO> projectDetailReqDTO) {
        projectDetailReqDTO.forEach(projectDetailReqDTO1 -> {
            String curDate = DateUtils.getCurDate();
            projectDetailReqDTO1.setRecordModifyTm(curDate);
        });
        projectDetailMapper.editProjectDetail(projectDetailReqDTO);
        return DataReuslt.success(projectDetailReqDTO);
    }

    @Override
    public DataReuslt deleteById(String id) {
        List<MaterialReqDTO> materialReqDTOS = materialMapper.getMaterialListByParam(id);
        if (materialReqDTOS.size() != 0) {
            return DataReuslt.fail("0", "该明细下有材料，不允许删除!");
        }
        projectDetailMapper.deleteById(id);
        return DataReuslt.success("删除成功");
    }
}
