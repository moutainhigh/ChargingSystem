package com.egintra.feeService.login.service.impl;

import com.egintra.common.dto.RightUserDTO;
import com.egintra.common.dto.SysInfoDTO;
import com.egintra.common.dto.SysUserDTO;
import com.egintra.common.enums.UserSexMenu;
import com.egintra.common.enums.UserStatusEnum;
import com.egintra.common.exception.ResultCode;
import com.egintra.common.repository.entity.RightUser;
import com.egintra.common.repository.mapper.LoginMapper;
import com.egintra.common.utils.DataReuslt;
import com.egintra.common.utils.DateUtils;
import com.egintra.common.utils.DesUtil;
import com.egintra.common.utils.TokenUtils;
import com.egintra.feeService.config.PageResult;
import com.egintra.feeService.login.service.LoginService;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestBody;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;
import java.util.Map;

@Service
public class LoginServiceImpl implements LoginService {

    private Logger LOGGER = LoggerFactory.getLogger(getClass());

    @Resource
    private LoginMapper loginMapper;

    @Value("${user.password.desKey}")
    private String desKey;
    @Value("${user.passwork.default.password}")
    private String defaultPassword;

    /**
     * 登录查询验证用户信息
     *
     * @param sysUserDTO 查询条件
     * @return 结果
     */
    @Override
    public DataReuslt login(SysUserDTO sysUserDTO) {

        //  如果参数为空则返回空对象
        if (null == sysUserDTO.getNo()
                || null == sysUserDTO.getPassword()) {
            return DataReuslt.fail(ResultCode.USER_INFO_IS_EMPTY.code(),
                    ResultCode.USER_INFO_IS_EMPTY.message());
        }

        // 设置查询条件
        RightUser rightUser = new RightUser();
        BeanUtils.copyProperties(sysUserDTO, rightUser);
        rightUser.setPassword(DesUtil.encrypt(desKey, rightUser.getPassword()));
        RightUser userInfo = loginMapper.queryUserInfo(rightUser);
        // 查询数据结果为空返回异常信息
        if (null == userInfo) {
            return DataReuslt.fail(ResultCode.USER_LOGIN_ERROR.code(),
                    ResultCode.USER_LOGIN_ERROR.message());
        }

        SysInfoDTO sysInfoDTO = new SysInfoDTO();
        sysInfoDTO.setRightUser(userInfo);
        // 生成token并返回
        String token = TokenUtils.getToken(String.valueOf(userInfo.getId()),
                DesUtil.decrypt(desKey, userInfo.getPassword()));
        // 返回token
        sysInfoDTO.setToken(token);

        // 返回结果
        return DataReuslt.success(sysInfoDTO);
    }

    /**
     * 查询所有用户信息
     *
     * @param sysUserDTO 查询条件
     * @return 结果
     */
    @Override
    public DataReuslt queryUserInfo(SysUserDTO sysUserDTO) {

        //  如果参数为空则返回报错
        if (null == sysUserDTO.getNo()
                || null == sysUserDTO.getPassword()) {
            return DataReuslt.fail(ResultCode.REQUEST_PARAMS_IS_EMPTY.code(),
                    ResultCode.REQUEST_PARAMS_IS_EMPTY.message());
        }
        // 设置查询条件，验证是否存在当前用户
        RightUser rightUser = new RightUser();
        BeanUtils.copyProperties(sysUserDTO, rightUser);
        RightUser resultRightUser = loginMapper.queryUserInfo(rightUser);
        // 查询数据结果为空返回报错，否则查询所有用户返回
        if (null == resultRightUser) {
            return DataReuslt.fail(ResultCode.CURRENT_USER_HAS_NO_PERMISSION.code(),
                    ResultCode.CURRENT_USER_HAS_NO_PERMISSION.message());
        }
        // 查询所有用户
        Page ps = PageHelper.startPage(sysUserDTO.getPage(), sysUserDTO.getSize());
        List<RightUser> userInfos = loginMapper.queryUserInfos();
        // 如果用户信息“性别”字段不为空，性别编码转中文
        if (!CollectionUtils.isEmpty(userInfos)) {
            Map<String, String> userSexMap = UserSexMenu.userSexMap;
            for (RightUser userInfo : userInfos) {
                if (null != userInfo.getSex()) {
                    userInfo.setSex(userSexMap.get(userInfo.getSex()));
                }
            }
        }

        PageResult<RightUser> result = new PageResult<RightUser>();
        result.setRows(userInfos);
        result.setTotal(ps.getTotal());
        result.setPages(ps.getPages());
        result.setCurrentPage(0);
        return DataReuslt.success(result);
    }

    /**
     * 查询所有用户信息 不分页
     *
     * @param sysUserDTO 查询条件
     * @return 结果
     */
    @Override
    public DataReuslt getUserList(SysUserDTO sysUserDTO) {
        //  如果参数为空则返回报错
        if (null == sysUserDTO.getNo()
                || null == sysUserDTO.getPassword()) {
            return DataReuslt.fail(ResultCode.REQUEST_PARAMS_IS_EMPTY.code(),
                    ResultCode.REQUEST_PARAMS_IS_EMPTY.message());
        }
        // 设置查询条件，验证是否存在当前用户

        RightUser rightUser = new RightUser();
        BeanUtils.copyProperties(sysUserDTO, rightUser);
        RightUser resultRightUser = loginMapper.queryUserInfo(rightUser);
        // 查询数据结果为空返回报错，否则查询所有用户返回
        if (null == resultRightUser) {
            return DataReuslt.fail(ResultCode.CURRENT_USER_HAS_NO_PERMISSION.code(),
                    ResultCode.CURRENT_USER_HAS_NO_PERMISSION.message());
        }
        // 查询所有用户
        List<RightUser> userInfos = loginMapper.queryUserInfos();
        // 如果用户信息“性别”字段不为空，性别编码转中文
        if (!CollectionUtils.isEmpty(userInfos)) {
            Map<String, String> userSexMap = UserSexMenu.userSexMap;
            for (RightUser userInfo : userInfos) {
                if (null != userInfo.getSex()) {
                    userInfo.setSex(userSexMap.get(userInfo.getSex()));
                }
            }
        }

        return DataReuslt.success(userInfos);
    }

    /**
     * 根据条件查询用户信息
     *
     * @param rightUserDTO 查询条件
     * @return 结果
     */
    @Override
    public DataReuslt querySomeUsers(RightUserDTO rightUserDTO) {

        // 根据条件查询用户信息
        List<RightUser> userInfos = loginMapper.querySomeUsers(rightUserDTO);
        // 如果用户信息“性别”字段不为空，性别编码转中文
        if (!CollectionUtils.isEmpty(userInfos)) {
            Map<String, String> userSexMap = UserSexMenu.userSexMap;
            for (RightUser userInfo : userInfos) {
                if (null != userInfo.getSex()) {
                    userInfo.setSex(userSexMap.get(userInfo.getSex()));
                }
            }
        }

        return DataReuslt.success(userInfos);
    }

    /**
     * 修改密码
     *
     * @param rightUserDTO 请求对象
     * @return 结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public DataReuslt changePwd(RightUserDTO rightUserDTO) {

        //  如果参数为空则返回报错
        if (StringUtils.isEmpty(rightUserDTO.getNo())
                || StringUtils.isEmpty(rightUserDTO.getOldPassword())
                || StringUtils.isEmpty(rightUserDTO.getNewPassword())) {
            // 请求参数为空
            return DataReuslt.fail(ResultCode.REQUEST_PARAMS_IS_EMPTY.code(),
                    ResultCode.REQUEST_PARAMS_IS_EMPTY.message());
        }

        // 根据入参查询用户信息
        RightUser rightUser = new RightUser();
        rightUser.setNo(rightUserDTO.getNo());
        // 加密原密码查询用户信息
        String oldPwd = DesUtil.encrypt(desKey, rightUserDTO.getOldPassword());
        rightUser.setPassword(oldPwd);
        RightUser resultRightUser = loginMapper.queryUserInfo(rightUser);

        // 如果查询结果为空，报错提示
        if (null == resultRightUser) {
            return DataReuslt.fail(ResultCode.UPDATE_USER_PASSWORD_FAILED.code(),
                    ResultCode.UPDATE_USER_PASSWORD_FAILED.message());
        }

        // 如果查询结果不为空，更新用户密码
        String newDesPwd = DesUtil.encrypt(desKey, rightUserDTO.getNewPassword());
        int i = loginMapper.updatePwd(rightUser, newDesPwd);

        return DataReuslt.success();
    }

    /**
     * 查询当前用户信息
     *
     * @param sysUserDTO 入参对象
     * @return 查询结果
     */
    @Override
    public DataReuslt getCurUserInfo(@RequestBody SysUserDTO sysUserDTO) {

        // 验证参数
        if (null == sysUserDTO) {
            return DataReuslt.fail(ResultCode.REQUEST_PARAMS_IS_EMPTY.code(),
                    ResultCode.REQUEST_PARAMS_IS_EMPTY.message());
        }
        // 设置查询条件，验证是否存在当前用户
        RightUser rightUser = new RightUser();
        BeanUtils.copyProperties(sysUserDTO, rightUser);
        RightUser curUserInfo = loginMapper.queryUserInfo(rightUser);
        // 查询数据结果为空报错
        if (null == curUserInfo) {
            return DataReuslt.fail(ResultCode.CURRENT_USER_HAS_NO_PERMISSION.code(),
                    ResultCode.CURRENT_USER_HAS_NO_PERMISSION.message());
        }
        // 通过枚举修改性别码值为中文
        if (null != curUserInfo.getSex()) {
            curUserInfo.setSex(UserSexMenu.userSexMap.get(curUserInfo.getSex()));
        }

        return DataReuslt.success(curUserInfo);
    }

    /**
     * 更新用户信息
     *
     * @param sysUserDTO 参数
     * @return 结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public DataReuslt updateUser(SysUserDTO sysUserDTO) {
        // 验证参数
        if (null == sysUserDTO) {
            return DataReuslt.fail(ResultCode.REQUEST_PARAMS_IS_EMPTY.code(),
                    ResultCode.REQUEST_PARAMS_IS_EMPTY.message());
        }

        // 更新
        int i = loginMapper.updateUser(sysUserDTO);

        return DataReuslt.success("更新成功");
    }

    /**
     * 删除用户信息
     *
     * @param sysUserDTO 参数
     * @return 结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public DataReuslt deleteUser(SysUserDTO sysUserDTO) {
        // 验证参数
        if (null == sysUserDTO) {
            return DataReuslt.fail(ResultCode.REQUEST_PARAMS_IS_EMPTY.code(),
                    ResultCode.REQUEST_PARAMS_IS_EMPTY.message());
        }
        int i = loginMapper.deleteUser(sysUserDTO);

        return DataReuslt.success("删除成功");
    }

    /**
     * 新增用户信息
     *
     * @param sysUserDTO 参数
     * @return 结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public DataReuslt addUser(@RequestBody SysUserDTO sysUserDTO) {
        // 查询当前账号是否存在，存在报错
        RightUser rightUser = new RightUser();
        rightUser.setNo(sysUserDTO.getNo());
        RightUser curUserInfo = loginMapper.queryUserInfo(rightUser);
        if (null != curUserInfo) {
            return DataReuslt.fail(ResultCode.ADD_USER_NO_FAILED.code(),
                    ResultCode.ADD_USER_NO_FAILED.message());
        }

        // 设置参数新增用户
        rightUser = new RightUser();
        BeanUtils.copyProperties(sysUserDTO, rightUser);
        rightUser.setRecordStatus(UserStatusEnum.NO.getCode());
        Date currentDate = DateUtils.getCurrentDate();
        rightUser.setRecordCreateTm(currentDate);
        rightUser.setRecordModifyTm(currentDate);
        // 初始化密码
        String password = DesUtil.encrypt(desKey, defaultPassword);
        rightUser.setPassword(password);
        // 插入数据
        loginMapper.insert(rightUser);

        return DataReuslt.success();
    }
}